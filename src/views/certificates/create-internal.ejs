<div class="container mt-4">
  <div class="card shadow">
    <div class="card-header bg-success text-white">
      <h5 class="mb-0"><i class="bi bi-award me-2"></i> إصدار شهادة تحليل داخلية</h5>
    </div>
    <div class="card-body">
      <form id="certificateForm" class="needs-validation" novalidate>
        <input type="hidden" name="type" value="internal">
        
        <div class="row mb-3">
          <div class="col-md-4">
            <label class="form-label">رقم الشهادة</label>
            <input type="text" class="form-control" name="certificate_number" value="<%= nextNumber %>" readonly>
          </div>
          <div class="col-md-4">
            <label class="form-label">التاريخ</label>
            <input type="text" class="form-control" value="<%= new Date().toLocaleDateString('en-GB') %>" readonly>
          </div>
          <div class="col-md-4">
            <label class="form-label required">اسم العميل</label>
            <input type="text" class="form-control" name="customer_name" required>
          </div>
        </div>

        <div class="row mb-3">
          <div class="col-md-4">
            <label class="form-label">رقم الهاتف</label>
            <input type="text" class="form-control" name="customer_phone">
          </div>
          <div class="col-md-4">
            <label class="form-label">العنوان</label>
            <input type="text" class="form-control" name="customer_address">
          </div>
          <div class="col-md-4">
            <label class="form-label required">المحلل</label>
            <input type="text" class="form-control" name="analyst" required>
          </div>
        </div>

        <div class="row mb-3">
          <div class="col-12">
            <label class="form-label">ملاحظات</label>
            <textarea class="form-control" name="notes" rows="2"></textarea>
          </div>
        </div>

        <div class="mb-4">
          <div class="d-flex justify-content-between align-items-center mb-3">
            <h5 class="mb-0">العينات المختارة</h5>
            <button type="button" class="btn btn-outline-success" data-bs-toggle="modal" data-bs-target="#selectSampleModal">
              <i class="bi bi-plus-circle me-1"></i> إضافة عينة
            </button>
          </div>
          <div class="table-responsive">
            <table class="table table-bordered">
              <thead class="table-light">
                <tr>
                  <th>رقم العينة</th>
                  <th>المورد/العينة</th>
                  <th>الكمية</th>
                  <th>وحدة التعبئة</th>
                  <th>درجة الحموضة</th>
                  <th>رقم البيروكسيد</th>
                  <th>232</th>
                  <th>266</th>
                  <th>270</th>
                  <th>274</th>
                  <th>دلتا k</th>
                  <th>ستيغما ستاديين</th>
                  <th>حذف</th>
                </tr>
              </thead>
              <tbody id="selectedSamplesBody"></tbody>
            </table>
          </div>
        </div>       

        <div class="d-flex justify-content-end gap-2">
          <a href="/certificates" class="btn btn-secondary">
            <i class="bi bi-x-circle me-1"></i> إلغاء
          </a>
          <button type="submit" class="btn btn-success">
            <i class="bi bi-save me-1"></i> إصدار الشهادة
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal -->
<div class="modal fade" id="selectSampleModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">اختيار عينة من المخزون</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <div class="table-responsive">
          <table class="table table-hover">
            <thead class="table-light">
              <tr>
                <th>رقم العينة</th>
                <th>المورد/العينة</th>
                <th>الكمية</th>
                <th>درجة الحموضة</th>
                <th>رقم البيروكسيد</th>
                <th>إضافة</th>
              </tr>
            </thead>
            <tbody>
              <% inventory.forEach(item => { 
                const absorptionReadings = item.absorption_readings ? item.absorption_readings.split(' ').map(Number) : [];
              %>
                <tr data-sample-id="<%= item.id %>">
                  <td><%= item.sample_number %></td>
                  <td><%= item.supplier_or_sample_name %></td>
                  <td><%= item.current_quantity %></td>
                  <td><%= item.ph %></td>
                  <td><%= item.peroxide_value %></td>
                  <td>
                    <button type="button" class="btn btn-sm btn-success add-sample-btn" 
                            data-id="<%= item.id %>"
                            data-sample-number="<%= item.sample_number %>"
                            data-supplier="<%= item.supplier_or_sample_name %>"
                            data-quantity="<%= item.current_quantity %>"
                            data-ph="<%= item.ph %>"
                            data-peroxide="<%= item.peroxide_value %>"
                            data-absorption-readings="<%= item.absorption_readings || '' %>"
                            data-stigmastadiene="<%= item.sigma_absorbance ? item.sigma_absorbance : '' %>">
                      <i class="bi bi-plus-circle"></i>
                    </button>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const selectedSamples = new Map();
  const form = document.getElementById('certificateForm');
  const modal = new bootstrap.Modal(document.getElementById('selectSampleModal'));
  
  // Debugging function
  function debugLog(action, data) {
    console.group(`Debug: ${action}`);
    console.groupEnd();
  }

  // Parse numeric value safely
  function parseNumericValue(value) {
    if (value === undefined || value === null || value === '') return 0;
    const parsed = parseFloat(value);
    return isNaN(parsed) ? 0 : parsed;
  }

  // Parse absorption readings
  function parseAbsorptionReadings(readingsStr) {
    try {
      if (!readingsStr) return [0, 0, 0, 0, 0];
      
      // Split by any whitespace and filter out empty strings
      const readings = readingsStr.trim().split(/\s+/).filter(Boolean).map(r => parseNumericValue(r));
      debugLog('Parsed Absorption Readings', { raw: readingsStr, parsed: readings });
      
      // Ensure we have exactly 5 values
      const result = readings.length >= 5 ? readings.slice(0, 5) : [...readings, ...Array(5 - readings.length).fill(0)];
      return result;
    } catch (error) {
      console.error('Error parsing absorption readings:', error);
      return [0, 0, 0, 0, 0];
    }
  }

  // Hide selected sample from modal
  function hideSelectedSampleFromModal(sampleId) {
    debugLog('Hiding Sample', { id: sampleId });
    const row = document.querySelector(`tr[data-sample-id="${sampleId}"]`);
    if (row) {
      row.classList.add('sample-hidden');
      const addButton = row.querySelector('.add-sample-btn');
      if (addButton) {
        addButton.disabled = true;
      }
      debugLog('Sample Hidden', { id: sampleId, success: true, row: row });
    } else {
      console.warn('Sample row not found for hiding', { id: sampleId });
    }
  }

  // Show sample in modal when removed from selection
  function showSampleInModal(sampleId) {
    debugLog('Showing Sample', { id: sampleId });
    const row = document.querySelector(`tr[data-sample-id="${sampleId}"]`);
    if (row) {
      row.classList.remove('sample-hidden');
      const addButton = row.querySelector('.add-sample-btn');
      if (addButton) {
        addButton.disabled = false;
      }
      debugLog('Sample Shown', { id: sampleId, success: true, row: row });
    } else {
      console.warn('Sample row not found for showing', { id: sampleId });
    }
  }

  // Format numeric value for display
  function formatNumericValue(value) {
    return parseNumericValue(value).toFixed(3);
  }

  // Update selected samples table
  function updateSelectedSamplesTable() {
    const tbody = document.getElementById('selectedSamplesBody');
    tbody.innerHTML = '';
    debugLog('Updating Selected Samples Table', { samplesCount: selectedSamples.size });

    selectedSamples.forEach(sample => {
      debugLog('Rendering Sample Row', sample);
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${sample.sample_number}</td>
        <td>${sample.supplier_name}</td>
        <td>${formatNumericValue(sample.quantity)}</td>
        <td>
          <input type="text" class="form-control form-control-sm packaging-unit-input"  
                 data-sample-id="${sample.id}"
                 placeholder="مثال: لتر، كجم، طن">
        </td>
        <td>${formatNumericValue(sample.ph)}</td>
        <td>${formatNumericValue(sample.peroxide)}</td>
        <td>${formatNumericValue(sample.abs_232)}</td>
        <td>${formatNumericValue(sample.abs_266)}</td>
        <td>${formatNumericValue(sample.abs_270)}</td>
        <td>${formatNumericValue(sample.abs_274)}</td>
        <td>${formatNumericValue(sample.delta_k)}</td>
        <td>${formatNumericValue(sample.stigmastadiene)}</td>
        <td>
          <button type="button" class="btn btn-sm btn-danger remove-sample-btn" data-id="${sample.id}">
            <i class="bi bi-trash"></i>
          </button>
        </td>
      `;
      tbody.appendChild(tr);
    });

    // Add event listeners for remove buttons
    document.querySelectorAll('.remove-sample-btn').forEach(button => {
      button.addEventListener('click', function() {
        const id = this.dataset.id;
        removeSample(id);
      });
    });

    // Add event listeners for packaging unit inputs
    document.querySelectorAll('.packaging-unit-input').forEach(input => {
      input.addEventListener('input', function() {
        const sampleId = this.dataset.sampleId;
        const sample = selectedSamples.get(sampleId);
        if (sample) {
          sample.packaging_unit = this.value.trim() || 'لتر';
          debugLog('Updated Packaging Unit', { sampleId, packaging_unit: sample.packaging_unit });
        }
      });
    });
  }

  // Remove sample function
  function removeSample(id) {
    debugLog('Removing Sample', { id });
    selectedSamples.delete(id);
    showSampleInModal(id);
    updateSelectedSamplesTable();
  }
  // Make removeSample available globally
  window.removeSample = removeSample;

  // Form submission
  form.addEventListener('submit', async function(e) {
    e.preventDefault();

    if (selectedSamples.size === 0) {
      alert('يجب اختيار عينة واحدة على الأقل');
      return;
    }

    // Validate required fields
    const requiredFields = {
      'customer_name': 'اسم العميل',
      'analyst': 'المحلل'
    };

    let hasError = false;
    for (const [field, label] of Object.entries(requiredFields)) {
      const input = form.querySelector(`[name="${field}"]`);
      if (!input || !input.value.trim()) {
        alert(`${label} مطلوب`);
        if (input) input.focus();
        hasError = true;
        break;
      }
    }

    if (hasError) return;

    try {
      // Calculate totals
      const items = Array.from(selectedSamples.values()).map(item => ({
        id: item.id,
        sample_number: item.sample_number,
        supplier_name: item.supplier_name,
        quantity: parseFloat(item.quantity),
        packaging_unit: item.packaging_unit || 'لتر',
        packaging_weight: parseFloat(item.quantity),
        total_weight: parseFloat(item.quantity),
        ph: parseFloat(item.ph),
        peroxide: parseFloat(item.peroxide),
        abs_232: parseFloat(item.abs_232),
        abs_266: parseFloat(item.abs_266),
        abs_270: parseFloat(item.abs_270),
        abs_274: parseFloat(item.abs_274),
        delta_k: parseFloat(item.delta_k),
        stigmastadiene: parseFloat(item.stigmastadiene)
      }));

      const total_quantity = items.reduce((sum, item) => sum + (parseFloat(item.quantity) || 0), 0);
      const total_weight = items.reduce((sum, item) => sum + (parseFloat(item.total_weight) || 0), 0);
      const formData = {
        type: 'internal',
        certificate_number: form.querySelector('input[name="certificate_number"]').value,
        customer_name: form.querySelector('input[name="customer_name"]').value.trim(),
        customer_phone: form.querySelector('input[name="customer_phone"]')?.value?.trim() || null,
        customer_address: form.querySelector('input[name="customer_address"]')?.value?.trim() || null,
        analyst: form.querySelector('input[name="analyst"]').value.trim(),
        notes: form.querySelector('textarea[name="notes"]')?.value?.trim() || null,
        total_quantity,
        total_weight,
        items
      };

      debugLog('Submitting Form', formData);

      const response = await fetch('/certificates', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json'
        },
        body: JSON.stringify(formData)
      });

      const data = await response.json();
      debugLog('Server Response', data);

      if (data.success) {
        window.location.href = `/certificates/${data.certificate_id}`;
      } else {
        if (data.errors && Array.isArray(data.errors)) {
          // Show detailed validation errors
          const errorMessages = data.errors.map(err => {
            console.error('Validation Error:', err);
            return err.msg || err.message;
          }).join('\n');
          alert(`أخطاء في البيانات المدخلة:\n${errorMessages}`);
        } else {
          alert(data.message || 'حدث خطأ أثناء حفظ الشهادة');
        }
      }
    } catch (error) {
      console.error('Error:', error);
      alert(error.message || 'حدث خطأ أثناء حفظ الشهادة');
    }
  });

  // Initialize - hide any previously selected samples
  selectedSamples.forEach((sample, id) => {
    hideSelectedSampleFromModal(id);
  });

  // Handle add sample button clicks
  document.querySelectorAll('.add-sample-btn').forEach(button => {
    button.addEventListener('click', function() {
      const id = this.dataset.id;
      const row = this.closest('tr');
      
      if (!row || row.classList.contains('sample-hidden')) {
        console.warn('Invalid row or already hidden');
        return;
      }

      debugLog('Adding Sample - Raw Data', this.dataset);

      const absorptionReadings = parseAbsorptionReadings(this.dataset.absorptionReadings);
      debugLog('Absorption Readings', { raw: this.dataset.absorptionReadings, parsed: absorptionReadings });

      const sample = {
        id: id,
        sample_number: this.dataset.sampleNumber,
        supplier_name: this.dataset.supplier,
        quantity: parseNumericValue(this.dataset.quantity),
        packaging_unit: 'لتر',
        ph: parseNumericValue(this.dataset.ph),
        peroxide: parseNumericValue(this.dataset.peroxide),
        abs_232: absorptionReadings[0],
        abs_266: absorptionReadings[1],
        abs_270: absorptionReadings[2],
        abs_274: absorptionReadings[3],
        delta_k: absorptionReadings[4],
        stigmastadiene: this.dataset.stigmastadiene ? parseNumericValue(this.dataset.stigmastadiene) : 0
      };
      
      debugLog('Adding Sample - Parsed Data', sample);
      
      selectedSamples.set(id, sample);
      hideSelectedSampleFromModal(id);
      updateSelectedSamplesTable();
      modal.hide();
    });
  });
});
</script>

<style>
.required:after {
  content: " *";
  color: red;
}

.table td {
  padding: 0.5rem;
  vertical-align: middle;
}

.modal-body {
  max-height: 70vh;
  overflow-y: auto;
}

/* تأكيد إخفاء الصفوف المختارة */
tr.sample-hidden {
  display: none !important;
}

/* تعطيل الأزرار */
.add-sample-btn:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

/* تحسين مظهر حقل وحدة التعبئة */
.packaging-unit-input {
  min-width: 80px;
  text-align: center;
  font-size: 0.875rem;
}

.packaging-unit-input:focus {
  border-color: #198754;
  box-shadow: 0 0 0 0.2rem rgba(25, 135, 84, 0.25);
}
</style> 