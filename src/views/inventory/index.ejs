<%- include('../layouts/header') %>
<%
function formatNumberDisplay(value) {
    if (value === null || value === undefined || value === '') return '-';

    const num = parseFloat(value);
    if (isNaN(num)) return '-';

    if (num === 0) return '0';

    let result = '';
    
    if (Number.isInteger(num)) {
        result = num.toString();
    } else {
        const decimalStr = num.toString().split('.')[1];
        if (!decimalStr) {
            result = num.toString();
        } else if (decimalStr.length <= 2) {
            result = num.toString();
        } else {
            result = num.toFixed(3);
        }
    }

    // إذا كان الرقم سالب، أضف رمز اتجاه LTR قبل السالب لعرضه بشكل صحيح في RTL
    if (num < 0) {
        return '\u200E' + result;
    }

    return result;
}
%>


<div class="container-fluid mt-4" style="width: full;">
  <div class="d-flex justify-content-between align-items-center mb-3">
    <h2 class="mb-0 no-print">
      <i class="fas fa-vial"></i> المخزون
    </h2>
    <div class="d-flex gap-2 no-print">
      <button type="button" class="btn btn-success" id="filterTodayBtn">
        <i class="fas fa-calendar-day me-1"></i> عرض نتائج اليوم
      </button>
      <% if (user && user.role==='editor' ) { %>
        <a href="/inventory/create" class="btn btn-success">
          <i class="fas fa-plus"></i> إضافة عينة جديدة
        </a>
      <% } %>
      <a href="/exports/inventory/excel" class="btn btn-success">
        <i class="fas fa-plus"></i>تصدير إلى Excel 
      </a>
    </div>
  </div>
  <!-- Filters -->
  <div class="card shadow mb-4 no-print">
    <div class="card-body">
      <form id="filterForm" class="row g-3 align-items-end">
        <div class="col-12 col-md-3 mb-2 mb-md-0">
          <label class="form-label">التاريخ</label>
          <input type="text" class="form-control datepicker" name="date" value="<%= locals.filters?.date || '' %>" placeholder="يوم/شهر/سنة">
        </div>
        <div class="col-12 col-md-3 mb-2 mb-md-0">
          <label class="form-label">المورد/العينة</label>
          <input type="text" class="form-control" name="supplier" value="<%= locals.filters?.supplier || '' %>"
            placeholder="اسم المورد أو العينة">
        </div>
        <div class="col-12 col-md-3 mb-2 mb-md-0">
          <label class="form-label">رقم العينة</label>
          <input type="text" class="form-control" name="sample_number"
            value="<%= locals.filters?.sample_number || '' %>" placeholder="رقم العينة">
        </div>
        <div class="col-12 col-md-3 d-flex flex-wrap gap-2">
          <button type="submit" class="btn btn-primary flex-fill">
            <i class="fas fa-search me-1"></i> بحث
          </button>
          <button type="button" class="btn btn-primary flex-fill" id="reloadBtn">
            <i class="fas fa-redo me-1"></i> تحديث
          </button>
          <button type="button" class="btn btn-primary flex-fill" id="clearFiltersBtn">
            <i class="fas fa-filter me-1"></i> تصفية الفلاتر
          </button>
          <button type="button" class="btn btn-outline-success flex-fill" id="filterPositiveBtn">
            <i class="fas fa-plus me-1"></i> عرض العينات المتوفرة (<%= formatNumberDisplay(totalCurrentQuantity) %>)
          </button>
        </div>
      </form>
    </div>
  </div>
  <!-- Inventory Table -->
  <div class="card shadow mb-4 p-0">
    <div class="card-header py-3 d-flex justify-content-between align-items-center no-print">
      <h6 class="m-0 font-weight-bold text-primary inventory-header-title">المخزون</h6>
      <div class="inventory-header-actions">
        <% if (user && user.role==='editor' ) { %>
          <button type="button" class="btn btn-sm btn-danger me-2" id="deleteSelectedBtn" disabled>
            <i class="fas fa-trash"></i> حذف المحدد نهائيا
          </button>
          <button type="button" class="btn btn-sm btn-danger me-2" id="trashSelectedBtn" disabled>
            <i class="fas fa-trash"></i> نقل الى سلة المحذوفات
          </button>
          <button type="button" class="btn btn-sm btn-success me-2" id="createInvoiceBtn" disabled>
            <i class="fas fa-file-invoice"></i> تخريج
          </button>
        <% } %>
        <a href="/inventory/deleted" class="btn btn-sm btn-primary me-2">
          <i class="fas fa-trash"></i> سلة المحذوفات
        </a>
        <button type="button" class="btn btn-sm btn-success" id="exportPdfBtn">
          <i class="fas fa-file-pdf"></i> تصدير PDF
        </button>
      </div>
    </div>
    <div class="card-body p-0">
      <!-- Print Header -->
      <div class="print-header print-only" style="padding-top: 0px !important;">
        <div class="d-flex justify-content-between align-items-center mb-2">
          <img src="/public/images/nexa.png" alt="شعار مؤسسة عجاج أخوان التجارية" style="width: 60px; height: 60px;">
          <div class="flex-grow-1 text-center">
            <h3 class="mb-0">مؤسسة عجاج أخوان التجارية لإنتاج المواد الغذائية وزيت الزيتون البكر <br> سجل تحاليل مخزون الزيت</h3>
          </div>
          <div style="width: 60px;"></div>
        </div>
        <p class="d-flex justify-content-between">
          <span>سوريا، حماة، أوتستراد دمشق حلب الدولي | ajajbrothers@gmail.com | 0988111127 - 0940500511</span>
          <span>تاريخ ووقت الطباعة: <%= new Date().toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) %> <%= new Date().toLocaleTimeString('en-GB') %></span>
        </p>
      </div>

      <% const totalPages = Math.ceil((inventory && inventory.length ? inventory.length : 0) / 30); %>
      <% for (let page = 0; page < totalPages; page++) { 
        const start = page * 30;
        const end = start + 30;
        const pageRows = inventory.slice(start, end);
      %>
        <% if (page > 0) { %>
          <div style="height: 110px;"></div>
          <div class="print-header print-only" style="padding-top: 0px !important;">
            <div class="d-flex justify-content-between align-items-center mb-2">
              <img src="/public/images/nexa.png" alt="شعار مؤسسة عجاج أخوان التجارية" style="width: 60px; height: 60px;">
              <div class="flex-grow-1 text-center">
                <h3 class="mb-0">مؤسسة عجاج أخوان التجارية لإنتاج المواد الغذائية وزيت الزيتون البكر <br> سجل تحاليل مخزون الزيت</h3>
              </div>
              <div style="width: 60px;"></div>
            </div>
            <p class="d-flex justify-content-between">
              <span>سوريا، حماة، أوتستراد دمشق حلب الدولي | ajajbrothers@gmail.com | 0988111127 - 0940500511</span>
              <span>تاريخ ووقت الطباعة: <%= new Date().toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) %> <%= new Date().toLocaleTimeString('en-GB') %></span>
            </p>
          </div>
        <% } %>
        <div class="table-responsive">
          <table class="table table-hover mb-0">
            <thead>
              <tr>
                <th class="d-print-none"><input type="checkbox" class="form-check-input" id="selectAll<%= page %>"></th>
                <th>#</th>
                <th>التاريخ</th>
                <th>رقم العينة</th>
                <th>المورد/العينة</th>
                <th>الكمية الأساسية</th>
                <th>الكمية الحالية</th>
                <th>الوزن الصافي</th>
                <th>درجة الحموضة</th>
                <th>رقم البيروكسيد</th>
                <th>وزن العينة</th>
                <th>امتصاص 232</th>
                <th>امتصاص 266</th>
                <th>امتصاص 270</th>
                <th>امتصاص 274</th>
                <th>Delta K</th>
                <th>ستيغما ستاديين</th>
                <th>المحلل</th>
                <th>ملاحظات</th>
                <th class="d-print-none">الإجراءات</th>
              </tr>
            </thead>
            <tbody>
              <% pageRows.forEach(function(item, index) { %>
                <% let absorptions = (item.absorption_readings || '').split(' '); %>
                <% const rowStyle = (start + index) % 2 === 0 ? 'even-row' : 'odd-row' %>
                <tr class="<%= rowStyle %> <%= item.is_rejected ? 'rejected-row' : '' %>">
                  <td class="d-print-none">
                    <input type="checkbox" class="form-check-input item-checkbox" data-id="<%= item.id %>">
                  </td>
                  <td><%= start + index + 1 %></td>
                  <td><%= new Date(item.date).toLocaleDateString('en-GB', { day: '2-digit', month: '2-digit', year: 'numeric' }) %></td>
                  <td><%= item.sample_number %></td>
                  <td><%= item.supplier_or_sample_name %></td>
                  <td><%= formatNumberDisplay(item.base_quantity) %></td>
                  <td><%= formatNumberDisplay(item.current_quantity) %></td>
                  <td><%= formatNumberDisplay(item.net_weight_total) %></td>
                  <td><%= formatNumberDisplay(item.ph) %></td>
                  <td><%= formatNumberDisplay(item.peroxide_value) %></td>
                  <td><%= formatNumberDisplay(item.sample_weight) %></td>
                  <td><%= absorptions[0] || '-' %></td>
                  <td><%= absorptions[1] || '-' %></td>
                  <td><%= absorptions[2] || '-' %></td>
                  <td><%= absorptions[3] || '-' %></td>
                  <td><%= absorptions[4] || '-' %></td>
                  <td><%= formatNumberDisplay(item.sigma_absorbance) %></td>
                  <td><%= item.analyst || '-' %></td>
                  <td><%= item.notes || '-' %></td>
                  <td class="d-print-none">
                    <div class="btn-group">
                        <a href="/inventory/<%= item.id %>" class="btn btn-sm btn-info btn-xs me-1" title="معاينة">
                            <i class="bi bi-eye-fill"></i>
                        </a>
                        <% if (user && user.role==='editor' ) { %>
                            <a href="/inventory/<%= item.id %>/edit" class="btn btn-sm btn-warning btn-xs me-1" title="تعديل">
                                <i class="bi bi-pencil-fill"></i>
                            </a>
                            <button type="button" class="btn btn-sm btn-danger btn-xs me-1 reject-btn <%= item.is_rejected ? 'rejected' : '' %>" 
                                    data-id="<%= item.id %>"
                                    data-rejected="<%= item.is_rejected %>"
                                    title="<%= item.is_rejected ? 'إلغاء الرفض' : 'رفض العينة' %>">
                                <i class="bi <%= item.is_rejected ? 'bi-check-circle-fill' : 'bi-x-circle-fill' %>"></i>
                            </button>
                        <% } %>
                    </div>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% } %>

      <!-- Print Footer -->
      <div class="print-footer print-only">
        <div>سياسة الخصوصية لمؤسسة عجاج أخوان التجارية 2025 - تم التطوير بواسطة شركة NEXA للبرمجيات</div>
      </div>
    </div>
  </div>
</div>

<!-- Delete Confirmation Modal -->
<div class="modal fade" id="deleteModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-exclamation-triangle text-danger me-2"></i>
          تأكيد الحذف
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        هل أنت متأكد من حذف العينة <span id="sampleNumber" class="fw-bold"></span>؟
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>
          إلغاء
        </button>
        <form id="deleteForm" method="POST" style="display: inline;">
          <button type="submit" class="btn btn-danger">
            <i class="fas fa-trash me-1"></i>
            حذف
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Bulk Delete Confirmation Modal -->
<div class="modal fade" id="bulkDeleteModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-exclamation-triangle text-danger me-2"></i>
          تأكيد الحذف الجماعي
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <p>هل أنت متأكد من حذف <span id="selectedCount" class="fw-bold text-danger"></span> عينة محددة؟</p>
        <div class="alert alert-warning">
          <i class="fas fa-warning me-2"></i>
          <strong>تحذير:</strong> لا يمكن التراجع عن هذا الإجراء. سيتم حذف جميع العينات المحددة نهائياً.
        </div>
        <div id="selectedItemsList" class="mt-3">
          <!-- سيتم تعبئتها ديناميكياً -->
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>
          إلغاء
        </button>
        <button type="button" class="btn btn-danger" id="confirmBulkDeleteBtn">
          <i class="fas fa-trash me-1"></i>
          حذف المحدد
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Create Invoice Modal -->
<div class="modal fade" id="createInvoiceModal" tabindex="-1">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">
          <i class="fas fa-file-invoice me-2"></i>
          إنشاء فاتورة جديدة
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <form id="createInvoiceForm" action="/invoices/create" method="POST">
        <div class="modal-body">
          <!-- Date Field -->
          <input type="hidden" name="date" id="invoice_date" required>
          <!-- Invoice Number Field -->
          <div class="mb-3">
            <label class="form-label required">رقم الفاتورة</label>
            <input type="number" class="form-control" name="invoice_number" id="invoice_number_field" required min="1">
          </div>
          
          <!-- Display Validation Errors Here -->
          <% if (locals.errors && locals.errors.length > 0) { %>
            <div class="alert alert-danger">
              <ul>
                <% locals.errors.forEach(error => { %>
                  <li><%= error.msg %></li>
                <% }); %>
              </ul>
            </div>
          <% } %>
          <div class="row mb-3">
            <div class="col-md-6">
              <label class="form-label required">اسم العميل</label>
              <input type="text" class="form-control" name="customer_name" value="<%= locals.oldInput?.customer_name || '' %>" required>
            </div>
            <div class="col-md-6">
              <label class="form-label">اسم السائق</label>
              <input type="text" class="form-control" name="driver_name" value="<%= locals.oldInput?.driver_name || '' %>">
            </div>
          </div>

          <!-- Notes Field -->
          <div class="mb-3">
            <label class="form-label">ملاحظات</label>
            <textarea class="form-control" name="notes" rows="3"><%= locals.oldInput?.notes || '' %></textarea>
          </div>

          <!-- Total Quantity Summary -->
          <div class="alert alert-info mb-3" id="totalQuantityAlert" style="display: none;">
            <div class="d-flex justify-content-between align-items-center">
              <span class="fw-bold">
                <i class="fas fa-calculator me-2"></i>
                مجموع الكمية المطلوبة:
              </span>
              <span class="badge bg-primary fs-6" id="totalQuantityDisplay">0</span>
            </div>
          </div>

          <!-- Selected Items Table -->
          <div class="table-responsive">
            <table class="table table-bordered">
              <thead class="table-light">
                <tr>
                  <th>رقم العينة</th>
                  <th>المورد/العينة</th>
                  <th>الكمية المتاحة</th>
                  <th>الكمية المطلوبة</th>
                  <th>حذف</th>
                </tr>
              </thead>
              <tbody id="selectedItems">
                <tr id="noItems">
                  <td colspan="5" class="text-center text-muted">
                    لم يتم اختيار أي عناصر بعد
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
            <i class="fas fa-times me-1"></i> إلغاء
          </button>
          <button type="submit" class="btn btn-primary">
            <i class="fas fa-save me-1"></i> إنشاء الفاتورة
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Reject Confirmation Modal -->
<div class="modal fade" id="rejectModal" tabindex="-1" role="dialog" aria-labelledby="rejectModalTitle">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="rejectModalTitle">
          <i class="fas fa-exclamation-triangle text-danger me-2"></i>
          تأكيد الرفض
        </h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
      </div>
      <div class="modal-body" id="rejectModalBody">
        <!-- سيتم تعبئتها ديناميكياً -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
          <i class="fas fa-times me-1"></i>
          إلغاء
        </button>
        <button type="button" class="btn btn-danger" id="confirmRejectBtn">
          <i class="fas fa-check me-1"></i>
          تأكيد
        </button>
      </div>
    </div>
  </div>
</div>

<!-- PDF Export Modal -->
<div id="pdfExportModal" class="modal fade" tabindex="-1" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title"><i class="fas fa-file-pdf me-2 text-success"></i> تم إنشاء ملف PDF</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="إغلاق"></button>
      </div>
      <div class="modal-body text-center">
        <div class="mb-3">
          <input type="text" id="pdfLinkInput" class="form-control text-center" readonly style="direction:ltr; font-size:0.95em;" />
        </div>
        <div class="d-flex justify-content-center gap-2 mb-2">
          <button id="copyPdfLinkBtn" class="btn btn-outline-primary btn-sm"><i class="fas fa-copy me-1"></i> نسخ الرابط</button>
          <button id="openPdfLinkBtn" class="btn btn-outline-info btn-sm"><i class="fas fa-external-link-alt me-1"></i> فتح الرابط</button>
          <a id="whatsappShareBtn" class="btn btn-outline-success btn-sm" target="_blank"><i class="fab fa-whatsapp me-1"></i> ارسال عبر واتساب</a>
        </div>
        <div class="alert alert-success py-2 mb-0">يمكنك مشاركة الرابط مع أي شخص لتحميل جدول المخزون مباشرة</div>
      </div>
    </div>
  </div>
</div>

<style>
  /* Default styles (for screen) */
  .print-only {
    display: none;
  }

  .table-responsive {
    overflow-x: auto;
    width: 100%;
    margin: 0;
    /* Remove margin */
    padding: 0;
    /* Remove padding */
  }

  .table {
    width: 100%;
    /* Ensure minimum width for the table */
    font-size: 0.8rem;
    /* Reduce font size for the table */
    border-collapse: collapse;
  }

  .table th,
  .table td {
    padding: 1px; /* Further reduced padding */
    text-align: center;
  }

  @media print {
    /* Page orientation and margins */
    @page {
      size: A4 landscape;
      margin: 1cm;
      margin-top: 0;
    }

    /* Hide elements not needed for print */
    .no-print,
    .d-print-none,
    .navbar,
    .inventory-header-actions,
    button,
    .btn,
    .form-check-input,
    .card-header,
    .card-footer,
    footer.bg-success {
      display: none !important;
    }

    /* Remove shadows and borders */
    .card,
    .card-header,
    .card-body,
    .print-header {
      box-shadow: none !important;
      border: none !important;
    }

    /* Ensure print-only content is displayed */
    .print-only {
      display: block !important;
    }

    /* Styles for the print header */
    .print-header {
      text-align: center;
      padding-bottom: 15px;
      margin-bottom: 20px;
      border-bottom: 1px solid #000;
      width: 100%;
      display: block;
      box-sizing: border-box;
      font-family: 'Cairo', sans-serif;
      page-break-after: avoid;
      margin-top: 0 !important;
      padding-top: 0 !important;
    }

    .print-header h3 {
      margin: 0 0 5px 0;
      align-items: center;
      font-size: 18px;
      font-weight: bold;
    }

    .print-header p {
      margin: 2px 0;
      font-size: 11px;
    }

    /* Styles for the table container */
    .table-responsive {
      overflow-x: visible !important;
      margin-top: 0 !important;
      padding-top: 0 !important;
      display: block;
      box-sizing: border-box;
    }

    /* Styles for the table */
    .table {
      width: 100%;
      border-collapse: collapse;
      margin: 0;
      font-family: 'Cairo', sans-serif;
      table-layout: auto;
      font-size: 7px;
    }

    .table th,
    .table td {
      border: 1px solid #000;
      padding: 1.5px;
      text-align: center;
      font-size: 8px;
      white-space: normal;
      overflow: visible;
      text-overflow: clip;
      word-break: break-word;
    }

    .table th {
      background-color: #f2f2f2 !important;
      -webkit-print-color-adjust: exact;
      font-weight: bold;
    }

    /* Styles for the print footer */
    .print-footer {
      text-align: center;
      margin-top: 25px;
      font-size: 10px;
      font-family: 'Cairo', sans-serif;
      width: 100%;
      display: block;
      box-sizing: border-box;
      page-break-before: avoid;
    }

    /* Page breaks */
    thead {
      display: table-header-group;
    }

    tfoot {
      display: table-footer-group;
    }

    tr {
      page-break-inside: avoid;
    }

    /* Hide Actions column in print */
    .table th:last-child,
    .table td:last-child {
      display: none !important;
    }

    /* Ensure proper page breaks */
    .table-responsive {
      page-break-inside: auto;
    }

    .table {
      page-break-inside: auto;
    }

    tr {
      page-break-inside: avoid;
      page-break-after: auto;
    }

    thead {
      display: table-header-group;
    }

    tfoot {
      display: table-footer-group;
    }

    /* Ensure footer stays at bottom */
    .print-footer {
      position: running(footer);
      margin-top: 20px;
    }

    @page {
      @bottom-center {
        content: element(footer);
      }
    }

    .rejected-row {
      background-color: #ebb4bc !important;
      -webkit-print-color-adjust: exact;
      print-color-adjust: exact;
    }
    tr.rejected-row > td {
      background-color: #ebb4bc !important;
      color: #fff;
      -webkit-print-color-adjust: exact;
      print-color-adjust: exact;
    }
  }

  @media (min-width: 992px) {
    .container,
    .container-lg,
    .container-md,
    .container-sm {
      max-width: 10200px !important;
    }
  }

  .required:after {
    content: " *";
    color: red;
  }

  .btn-xs {
    padding: 0.1rem 0.3rem;
    font-size: 0.75rem;
    line-height: 1.2;
  }

  .even-row {
    background-color: #f9f9f9;
  }
  .odd-row {
    background-color: #ffffff;
  }
  .rejected-row {
    background-color: #ebb4bc !important;
  }
  tr.rejected-row > td {
    background-color: #ebb4bc !important;
    color: #fff;
  }
  .reject-btn {
    background-color: #dc3545;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }
  .reject-btn:hover {
    background-color: #c82333;
    color: white;
  }
  .reject-btn.rejected {
    background-color: #28a745;
    color: white;
  }
  
  /* تحسينات لزر الحذف الجماعي */
  #deleteSelectedBtn {
    transition: all 0.3s ease;
  }
  
  #deleteSelectedBtn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
  
  #deleteSelectedBtn:not(:disabled):hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(220, 53, 69, 0.3);
  }
  
  /* تحسين مظهر modal الحذف الجماعي */
  #bulkDeleteModal .modal-body {
    max-height: 400px;
    overflow-y: auto;
  }
  
  #bulkDeleteModal .table-sm {
    font-size: 0.875rem;
  }
  
  #bulkDeleteModal .table-sm th,
  #bulkDeleteModal .table-sm td {
    padding: 0.5rem;
  }
  
  /* تحسين مظهر زر الحذف في modal */
  .remove-item-btn {
    transition: all 0.2s ease;
    border-radius: 50%;
    width: 28px;
    height: 28px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0;
  }
  
  .remove-item-btn:hover {
    background-color: #dc3545;
    color: white;
    transform: scale(1.1);
  }
  
  .remove-item-btn:active {
    transform: scale(0.95);
  }
  
  /* تحسين التجاوب مع الشاشات الصغيرة */
  @media (max-width: 768px) {
    .inventory-header-actions {
      flex-direction: column;
      gap: 0.5rem;
    }
    
    .inventory-header-actions .btn {
      width: 100%;
      margin: 0 !important;
    }
    
    #bulkDeleteModal .modal-dialog {
      margin: 1rem;
    }
    
    #bulkDeleteModal .table-responsive {
      font-size: 0.75rem;
    }
  }
  
  @media print {
</style>

<script>
// Get current protocol and host
const currentProtocol = window.location.protocol;
const currentHost = window.location.host;
const API_BASE = `${currentProtocol}//${currentHost}`;

document.addEventListener('DOMContentLoaded', function() {
    // زر عرض نتائج اليوم
    const filterTodayBtn = document.getElementById('filterTodayBtn');
    if (filterTodayBtn) {
        filterTodayBtn.addEventListener('click', filterToday);
    }
    // زر إعادة
    const reloadBtn = document.getElementById('reloadBtn');
    if (reloadBtn) {
        reloadBtn.addEventListener('click', () => window.location.reload());
    }
    // زر تصفية الكميات الموجبة
    const filterPositiveBtn = document.getElementById('filterPositiveBtn');
    if (filterPositiveBtn) {
        filterPositiveBtn.addEventListener('click', filterPositiveQuantity);
    }
    // زر تصفية الفلاتر
    const clearFiltersBtn = document.getElementById('clearFiltersBtn');
    if (clearFiltersBtn) {
        clearFiltersBtn.addEventListener('click', clearFilters);
    }
    // أزرار الحذف
    document.querySelectorAll('.delete-btn').forEach(button => {
        button.addEventListener('click', function() {
            const id = this.getAttribute('data-id');
            const sampleNumber = this.getAttribute('data-sample');
            confirmDelete(id, sampleNumber);
        });
    });
    // أزرار الرفض
    document.querySelectorAll('.reject-btn').forEach(button => {
        button.addEventListener('click', function() {
            rejectSampleId = this.dataset.id;
            rejectSampleStatus = this.dataset.rejected == 'true' || this.dataset.rejected == '1';
            const modalBody = document.getElementById('rejectModalBody');
            const modalTitle = document.getElementById('rejectModalTitle');
            if (rejectSampleStatus) {
                modalTitle.innerHTML = '<i class="fas fa-exclamation-triangle text-danger me-2"></i> تأكيد إزالة الرفض';
                modalBody.textContent = 'هل أنت متأكد من إزالة الرفض من هذه العينة؟';
            } else {
                modalTitle.innerHTML = '<i class="fas fa-exclamation-triangle text-danger me-2"></i> تأكيد الرفض';
                modalBody.textContent = 'هل أنت متأكد من رفض هذه العينة؟';
            }
            const rejectModalEl = document.getElementById('rejectModal');
            if (!rejectModalInstance) {
                rejectModalInstance = new bootstrap.Modal(rejectModalEl);
            }
            rejectModalInstance.show();
            setTimeout(() => {
                document.querySelector('#rejectModal .btn-secondary').focus();
            }, 100);
            // Store reference to the clicked button for later update
            rejectBtnInModal._targetBtn = this;
        });
    });

    // Handle select all checkboxes for each page
    const totalPages = <%= Math.ceil((inventory && inventory.length ? inventory.length : 0) / 30) %>;
    for (let page = 0; page < totalPages; page++) {
        const selectAllCheckbox = document.getElementById(`selectAll${page}`);
        if (selectAllCheckbox) {
            selectAllCheckbox.addEventListener('change', function() {
                const pageContainer = this.closest('.table-responsive');
                const checkboxes = pageContainer.querySelectorAll('.item-checkbox');
                checkboxes.forEach(checkbox => {
                    checkbox.checked = this.checked;
                });
                updateCreateInvoiceButton();
            });
        }
    }

    // Handle individual checkboxes
    const checkboxes = document.querySelectorAll('.item-checkbox');
    checkboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            updateCreateInvoiceButton();
            
            // Update the select all checkbox state
            const pageContainer = this.closest('.table-responsive');
            const pageCheckboxes = pageContainer.querySelectorAll('.item-checkbox');
            const selectAllCheckbox = pageContainer.querySelector('[id^="selectAll"]');
            
            if (selectAllCheckbox) {
                const allChecked = Array.from(pageCheckboxes).every(cb => cb.checked);
                const someChecked = Array.from(pageCheckboxes).some(cb => cb.checked);
                selectAllCheckbox.checked = allChecked;
                selectAllCheckbox.indeterminate = someChecked && !allChecked;
            }
        });
    });

    // Handle bulk delete button click
    const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');
    if (deleteSelectedBtn) {
        deleteSelectedBtn.addEventListener('click', function() {
            const checkedBoxes = document.querySelectorAll('.item-checkbox:checked');
            
            if (checkedBoxes.length === 0) {
                alert('يرجى اختيار عينة واحدة على الأقل للحذف');
                return;
            }

            // Collect selected items info
            const selectedItems = [];
            checkedBoxes.forEach(checkbox => {
                const row = checkbox.closest('tr');
                const item = {
                    id: checkbox.dataset.id,
                    sample_number: row.cells[3].textContent.trim(),
                    supplier: row.cells[4].textContent.trim()
                };
                selectedItems.push(item);
            });

            // Update modal content
            document.getElementById('selectedCount').textContent = selectedItems.length;
            
            const itemsList = document.getElementById('selectedItemsList');
            let listHTML = '<div class="table-responsive"><table class="table table-sm table-bordered">';
            listHTML += '<thead><tr><th>رقم العينة</th><th>المورد/العينة</th><th>إجراءات</th></tr></thead><tbody>';
            selectedItems.forEach(item => {
                listHTML += `<tr data-item-id="${item.id}">
                    <td>${item.sample_number}</td>
                    <td>${item.supplier}</td>
                    <td class="text-center align-middle">
                        <button type="button" class="btn btn-outline-danger btn-sm rounded-circle d-flex align-items-center justify-content-center mx-auto remove-item-btn" 
                            data-item-id="${item.id}" 
                            title="إزالة من القائمة" 
                            style="width: 32px; height: 32px;">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </td>
                </tr>`;
            });
            
            listHTML += '</tbody></table></div>';
            itemsList.innerHTML = listHTML;

            // Add event listeners for remove buttons
            itemsList.querySelectorAll('.remove-item-btn').forEach(btn => {
                btn.addEventListener('click', function() {
                    const itemId = this.dataset.itemId;
                    removeItemFromBulkDeleteModal(itemId);
                });
            });

            // Show modal
            const modal = new bootstrap.Modal(document.getElementById('bulkDeleteModal'));
            modal.show();
        });
    }

    // Handle bulk delete confirmation
    const confirmBulkDeleteBtn = document.getElementById('confirmBulkDeleteBtn');
    if (confirmBulkDeleteBtn) {
        confirmBulkDeleteBtn.addEventListener('click', function() {
            const checkedBoxes = document.querySelectorAll('.item-checkbox:checked');
            const selectedIds = Array.from(checkedBoxes).map(cb => cb.dataset.id);
            
            if (selectedIds.length === 0) {
                alert('لم يتم اختيار أي عينات للحذف');
                return;
            }

            // Disable button and show loading
            this.disabled = true;
            this.innerHTML = '<span class="spinner-border spinner-border-sm me-1"></span> جاري الحذف...';

            // Send delete request
            fetch('/inventory/bulk-delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ ids: selectedIds })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Hide modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('bulkDeleteModal'));
                    modal.hide();
                    window.location.reload();
                } else {
                    throw new Error(data.message || 'حدث خطأ أثناء الحذف');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message || 'حدث خطأ أثناء الحذف');
                
                // Re-enable button
                this.disabled = false;
                this.innerHTML = '<i class="fas fa-trash me-1"></i> حذف المحدد';
            });
        });
    }

    // Initialize print button
    const printBtn = document.getElementById('printBtn');
    
    if (printBtn) {
        printBtn.addEventListener('click', function() {
            doPrint();
        });
    }

    // Update initial button state
    updateCreateInvoiceButton();

    // Handle create invoice button click
    const createInvoiceBtn = document.getElementById('createInvoiceBtn');
    
    if (createInvoiceBtn) {
        createInvoiceBtn.addEventListener('click', function() {
            const checkedBoxes = document.querySelectorAll('.item-checkbox:checked');
            
            if (checkedBoxes.length === 0) {
                alert('يرجى اختيار عنصر واحد على الأقل من المخزون');
                return;
            }

            // Set current date
            const now = new Date();
            const currentDate = now.getFullYear() + '-' + 
                            String(now.getMonth() + 1).padStart(2, '0') + '-' + 
                            String(now.getDate()).padStart(2, '0');
            document.getElementById('invoice_date').value = currentDate;

            // Collect selected items
            const selectedItems = [];
            checkedBoxes.forEach(checkbox => {
                const row = checkbox.closest('tr');
                const item = {
                    id: checkbox.dataset.id,
                    sample_number: row.cells[3].textContent.trim(),
                    supplier: row.cells[4].textContent.trim(),
                    available_quantity: parseFloat(row.cells[6].textContent)
                };
                selectedItems.push(item);
            });

            // Update modal table
            const tbody = document.getElementById('selectedItems');
            if (tbody) {
                let tableHTML = '';
                selectedItems.forEach(item => {
                    tableHTML += `
                        <tr data-item-id="${item.id}">
                            <td>${item.sample_number}</td>
                            <td>${item.supplier}</td>
                            <td>${item.available_quantity}</td>
                            <td>
                                <input type="number" 
                                       class="form-control form-control-sm quantity-input" 
                                       data-item-id="${item.id}"
                                       name="quantities[${item.id}]" 
                                       min="0.1" 
                                       step="0.1"
                                       max="${item.available_quantity}" 
                                       value="1"
                                       required>
                            </td>
                            <td>
                                <button type="button" class="btn btn-sm btn-danger delete-item-btn" data-item-id="${item.id}">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </td>
                        </tr>
                    `;
                });
                tbody.innerHTML = tableHTML;

                // Add event listeners for delete buttons
                tbody.querySelectorAll('.delete-item-btn').forEach(btn => {
                    btn.addEventListener('click', function() {
                        const itemId = this.dataset.itemId;
                        removeItemFromModal(itemId);
                    });
                });

                // Add event listeners for quantity inputs
                tbody.querySelectorAll('.quantity-input').forEach(input => {
                    input.addEventListener('input', updateTotalQuantity);
                });

                // Update total quantity initially
                updateTotalQuantity();
            }

            // Show modal
            const modal = document.getElementById('createInvoiceModal');
            if (modal) {
                const modalInstance = new bootstrap.Modal(modal);
                modalInstance.show();
                
                // Reset total quantity when modal is hidden
                modal.addEventListener('hidden.bs.modal', function() {
                    const totalQuantityAlert = document.getElementById('totalQuantityAlert');
                    const totalQuantityDisplay = document.getElementById('totalQuantityDisplay');
                    if (totalQuantityAlert) totalQuantityAlert.style.display = 'none';
                    if (totalQuantityDisplay) totalQuantityDisplay.textContent = '0';
                });
            }
        });
    }

    // Handle trash selected button click
    const trashSelectedBtn = document.getElementById('trashSelectedBtn');
    
    if (trashSelectedBtn) {
        trashSelectedBtn.addEventListener('click', function() {
            const checkedBoxes = document.querySelectorAll('.item-checkbox:checked');
            
            if (checkedBoxes.length === 0) {
                alert('يرجى اختيار عينة واحدة على الأقل');
                return;
            }

            if (confirm(`هل أنت متأكد من نقل ${checkedBoxes.length} عينة إلى سلة المحذوفات؟`)) {
                const ids = Array.from(checkedBoxes).map(cb => cb.dataset.id);
                
                fetch('/inventory/trash', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ ids })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        window.location.reload();
                    } else {
                        alert(data.message || 'حدث خطأ أثناء نقل العينات إلى سلة المحذوفات');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('حدث خطأ أثناء نقل العينات إلى سلة المحذوفات');
                });
            }
        });
    }

    // Handle form submission
    const createInvoiceForm = document.getElementById('createInvoiceForm');
    
    // Function to calculate and update total quantity
    function updateTotalQuantity() {
        const quantityInputs = document.querySelectorAll('.quantity-input');
        const totalQuantityAlert = document.getElementById('totalQuantityAlert');
        const totalQuantityDisplay = document.getElementById('totalQuantityDisplay');
        
        let total = 0;
        let hasItems = false;
        
        quantityInputs.forEach(input => {
            const quantity = parseFloat(input.value) || 0;
            if (quantity > 0) {
                total += quantity;
                hasItems = true;
            }
        });
        
        if (hasItems) {
            totalQuantityAlert.style.display = 'block';
            totalQuantityDisplay.textContent = total.toFixed(2);
        } else {
            totalQuantityAlert.style.display = 'none';
        }
    }
    
    // Function to remove item from modal
    function removeItemFromModal(itemId) {
        const row = document.querySelector(`tr[data-item-id="${itemId}"]`);
        if (row) {
            row.remove();
            updateTotalQuantity();
            
            // If no items left, show the "no items" message
            const tbody = document.getElementById('selectedItems');
            if (tbody.children.length === 0) {
                tbody.innerHTML = `
                    <tr id="noItems">
                        <td colspan="5" class="text-center text-muted">
                            لم يتم اختيار أي عناصر بعد
                        </td>
                    </tr>
                `;
            }
        }
    }
    
    if (createInvoiceForm) {
        createInvoiceForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Get form data
            const formData = new FormData(this);
            const customer_name = formData.get('customer_name');
            const driver_name = formData.get('driver_name');
            const notes = formData.get('notes');
            const date = document.getElementById('invoice_date').value;
            const invoice_number = formData.get('invoice_number');
            
            // Get quantities
            const quantities = {};
            document.querySelectorAll('.quantity-input').forEach(input => {
                const itemId = input.dataset.itemId;
                const quantity = parseFloat(input.value);
                if (itemId && !isNaN(quantity) && quantity > 0) {
                    quantities[itemId] = quantity;
                }
            });

            // Validate customer name
            if (!customer_name) {
                alert('اسم العميل مطلوب');
                return;
            }

            // Validate invoice number
            if (!invoice_number || parseInt(invoice_number) <= 0) {
                alert('رقم الفاتورة يجب أن يكون عدداً موجباً');
                return;
            }

            // Prepare request data
            const requestData = {
                date,
                invoice_number,
                customer_name,
                driver_name,
                notes,
                quantities
            };

            // Create invoice
            fetch('/invoices/create', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Cache-Control': 'no-cache'
                },
                credentials: 'same-origin',
                body: JSON.stringify(requestData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.text().then(text => {
                        throw new Error(`حدث خطأ أثناء إنشاء الفاتورة (${response.status}): ${text}`);
                    });
                }
                return response.json();
            })
            .then(responseData => {
                if (responseData.success) {
                    window.location.href = `/invoices/${responseData.invoiceId}`;
                } else {
                    throw new Error(responseData.message || 'حدث خطأ أثناء إنشاء الفاتورة');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert(error.message || 'حدث خطأ أثناء إنشاء الفاتورة');
            });
        });
    }

    // Add event listeners to all reject buttons
    rejectBtnInModal = document.getElementById('confirmRejectBtn');
    rejectBtnInModal.addEventListener('click', function() {
        if (rejectSampleId) {
            rejectBtnInModal.disabled = true;
            fetch(`/inventory/${rejectSampleId}/toggle-reject`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => response.json())
            .then(data => {
                rejectBtnInModal.disabled = false;
                if (data.success) {
                    // تحديث الزر والصف ديناميكياً بدون إعادة تحميل الصفحة
                    const btn = rejectBtnInModal._targetBtn;
                    if (btn) {
                        // تحديث data-rejected
                        const newRejected = !(btn.dataset.rejected == 'true' || btn.dataset.rejected == '1');
                        btn.dataset.rejected = newRejected ? '1' : '0';
                        // تحديث الكلاس
                        btn.classList.toggle('rejected', newRejected);
                        // تحديث الأيقونة
                        const icon = btn.querySelector('i');
                        if (icon) {
                            icon.className = 'bi ' + (newRejected ? 'bi-check-circle-fill' : 'bi-x-circle-fill');
                        }
                        // تحديث التولتيب
                        btn.title = newRejected ? 'إلغاء الرفض' : 'رفض العينة';
                        // تحديث الصف
                        const row = btn.closest('tr');
                        if (row) {
                            row.classList.toggle('rejected-row', newRejected);
                        }
                    }
                    // إغلاق المودال
                    if (rejectModalInstance) rejectModalInstance.hide();
                } else {
                    alert('حدث خطأ أثناء تحديث حالة العينة');
                }
            })
            .catch(error => {
                rejectBtnInModal.disabled = false;
                console.error('Error:', error);
                alert('حدث خطأ أثناء تحديث حالة العينة');
            });
        }
    });

    document.getElementById('rejectModal').addEventListener('hidden.bs.modal', function () {
        rejectBtnInModal.disabled = false;
        rejectSampleId = null;
        rejectSampleStatus = null;
        rejectBtnInModal._targetBtn = null;
    });

    // Initialize Flatpickr
    flatpickr(".datepicker", {
        locale: "ar",
        dateFormat: "d/m/Y",
        allowInput: true,
        defaultDate: "<%= locals.filters?.date || '' %>"
    });

    // Add PDF export functionality
    const exportBtn = document.getElementById('exportPdfBtn');
    const modal = new bootstrap.Modal(document.getElementById('pdfExportModal'));
    const pdfLinkInput = document.getElementById('pdfLinkInput');
    const copyBtn = document.getElementById('copyPdfLinkBtn');
    const whatsappBtn = document.getElementById('whatsappShareBtn');

    exportBtn?.addEventListener('click', async function() {
        exportBtn.disabled = true;
        exportBtn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> جاري التصدير...';
        try {
            // اجمع الفلاتر الحالية من النموذج
            const form = document.getElementById('filterForm');
            const params = new URLSearchParams(new FormData(form)).toString();
            const res = await fetch(`/inventory/export/pdf?${params}`);
            const data = await res.json();
            if (data.success && data.url) {
                pdfLinkInput.value = data.url;
                whatsappBtn.href = `https://wa.me/?text=${encodeURIComponent(data.url)}`;
                modal.show();
            } else {
                alert(data.message || 'حدث خطأ أثناء التصدير');
            }
        } catch (e) {
            alert('حدث خطأ أثناء الاتصال بالخادم');
        }
        exportBtn.disabled = false;
        exportBtn.innerHTML = '<i class="fas fa-file-pdf"></i> تصدير PDF';
    });

    copyBtn?.addEventListener('click', function() {
        pdfLinkInput.select();
        document.execCommand('copy');
        copyBtn.innerHTML = '<i class="fas fa-check"></i> تم النسخ!';
        setTimeout(() => {
            copyBtn.innerHTML = '<i class="fas fa-copy me-1"></i> نسخ الرابط';
        }, 1500);
    });

    // Add open link functionality
    const openLinkBtn = document.getElementById('openPdfLinkBtn');
    openLinkBtn?.addEventListener('click', function() {
        const pdfUrl = pdfLinkInput.value;
        if (pdfUrl) {
            window.open(pdfUrl, '_blank');
        } else {
            alert('لا يوجد رابط متاح للفتح');
        }
    });
});

// Print function
function doPrint() {
    document.body.classList.add('printing');
    window.print();
    setTimeout(() => {
        document.body.classList.remove('printing');
    }, 1000);
}

// Delete confirmation function
function confirmDelete(id, sampleNumber) {
    document.getElementById('sampleNumber').textContent = sampleNumber;
    document.getElementById('deleteForm').action = `/inventory/delete/${id}`;
    new bootstrap.Modal(document.getElementById('deleteModal')).show();
}

// Filter today function
function filterToday() {
    const today = new Date();
    const formattedDateForInput = today.getDate().toString().padStart(2, '0') + '/' + 
                                 (today.getMonth() + 1).toString().padStart(2, '0') + '/' + 
                                 today.getFullYear();
    
    const dateInput = document.querySelector('input[name="date"]');
    dateInput.value = formattedDateForInput;
    
    // Submit the form instead of manipulating URL directly
    document.getElementById('filterForm').submit();
}

// Clear filters function
function clearFilters() {
    document.querySelector('input[name="date"]').value = '';
    document.querySelector('input[name="supplier"]').value = '';
    document.querySelector('input[name="sample_number"]').value = '';
    document.getElementById('filterForm').submit();
}

// Update create invoice button state
function updateCreateInvoiceButton() {
    const checkedBoxes = document.querySelectorAll('.item-checkbox:checked');
    const createInvoiceBtn = document.getElementById('createInvoiceBtn');
    const deleteSelectedBtn = document.getElementById('deleteSelectedBtn');
    const trashSelectedBtn = document.getElementById('trashSelectedBtn');
    
    if (createInvoiceBtn) {
        if (checkedBoxes.length > 0) {
            createInvoiceBtn.disabled = false;
            createInvoiceBtn.classList.remove('btn-outline-success');
            createInvoiceBtn.classList.add('btn-success');
        } else {
            createInvoiceBtn.disabled = true;
            createInvoiceBtn.classList.remove('btn-success');
            createInvoiceBtn.classList.add('btn-outline-success');
        }
    }
    
    if (deleteSelectedBtn) {
        if (checkedBoxes.length > 0) {
            deleteSelectedBtn.disabled = false;
            deleteSelectedBtn.classList.remove('btn-outline-danger');
            deleteSelectedBtn.classList.add('btn-danger');
        } else {
            deleteSelectedBtn.disabled = true;
            deleteSelectedBtn.classList.remove('btn-danger');
            deleteSelectedBtn.classList.add('btn-outline-danger');
        }
    }
    
    if (trashSelectedBtn) {
        if (checkedBoxes.length > 0) {
            trashSelectedBtn.disabled = false;
            trashSelectedBtn.classList.remove('btn-outline-danger');
            trashSelectedBtn.classList.add('btn-danger');
        } else {
            trashSelectedBtn.disabled = true;
            trashSelectedBtn.classList.remove('btn-danger');
            trashSelectedBtn.classList.add('btn-outline-danger');
        }
    }
}

let rejectSampleId = null;
let rejectSampleStatus = null;
let rejectModalInstance = null;
let rejectBtnInModal = null;

function filterPositiveQuantity() {
    const url = new URL(window.location.href);
    url.searchParams.set('positive_quantity', '1');
    window.location.href = url.toString();
}

// Function to remove item from modal
function removeItemFromModal(itemId) {
    const row = document.querySelector(`tr[data-item-id="${itemId}"]`);
    
    if (row) {
        row.remove();
        
        // Check if there are any remaining items
        const remainingRows = document.querySelectorAll('tr[data-item-id]');
        if (remainingRows.length === 0) {
            // Show "no items" message
            const tbody = document.getElementById('selectedItems');
            tbody.innerHTML = `
                <tr id="noItems">
                    <td colspan="5" class="text-center text-muted">
                        لم يتم اختيار أي عناصر بعد
                    </td>
                </tr>
            `;
        }
        
        // Uncheck the corresponding checkbox in the main table
        const checkbox = document.querySelector(`.item-checkbox[data-id="${itemId}"]`);
        if (checkbox) {
            checkbox.checked = false;
            updateCreateInvoiceButton();
        }
    }
}

// Function to remove item from bulk delete modal
function removeItemFromBulkDeleteModal(itemId) {
    const itemsList = document.getElementById('selectedItemsList');
    const row = itemsList.querySelector(`tr[data-item-id="${itemId}"]`);
    
    if (row) {
        row.remove();
        
        // Check if there are any remaining items
        const remainingRows = itemsList.querySelectorAll('tr[data-item-id]');
        if (remainingRows.length === 0) {
            // Show "no items" message
            itemsList.innerHTML = `
                <tr id="noItems">
                    <td colspan="3" class="text-center text-muted">
                        لم يتم اختيار أي عناصر بعد
                    </td>
                </tr>
            `;
            // Hide modal if no items left
            const modal = bootstrap.Modal.getInstance(document.getElementById('bulkDeleteModal'));
            if (modal) {
                modal.hide();
            }
        } else {
            // Update the count
            document.getElementById('selectedCount').textContent = remainingRows.length;
        }
        
        // Uncheck the corresponding checkbox in the main table
        const checkbox = document.querySelector(`.item-checkbox[data-id="${itemId}"]`);
        if (checkbox) {
            checkbox.checked = false;
            updateCreateInvoiceButton();
        }
    }
}
</script>